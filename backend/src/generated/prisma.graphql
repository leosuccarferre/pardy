# source: https://us1.prisma.sh/leosuccarferre/pardy/dev
# timestamp: Thu Feb 14 2019 23:08:33 GMT-0800 (Pacific Standard Time)

type AggregateClue {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Clue implements Node {
  id: ID!
  category: String!
  difficulty: Int!
  question: String!
  choices: String!
  answer: String!
  airDate: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ClueConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClueEdge]!
  aggregate: AggregateClue!
}

input ClueCreateInput {
  category: String!
  difficulty: Int!
  question: String!
  choices: String!
  answer: String!
  airDate: DateTime!
}

"""An edge in a connection."""
type ClueEdge {
  """The item at the end of the edge."""
  node: Clue!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ClueOrderByInput {
  id_ASC
  id_DESC
  category_ASC
  category_DESC
  difficulty_ASC
  difficulty_DESC
  question_ASC
  question_DESC
  choices_ASC
  choices_DESC
  answer_ASC
  answer_DESC
  airDate_ASC
  airDate_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CluePreviousValues {
  id: ID!
  category: String!
  difficulty: Int!
  question: String!
  choices: String!
  answer: String!
  airDate: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ClueSubscriptionPayload {
  mutation: MutationType!
  node: Clue
  updatedFields: [String!]
  previousValues: CluePreviousValues
}

input ClueSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ClueSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClueSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClueSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ClueWhereInput
}

input ClueUpdateInput {
  category: String
  difficulty: Int
  question: String
  choices: String
  answer: String
  airDate: DateTime
}

input ClueUpdateManyMutationInput {
  category: String
  difficulty: Int
  question: String
  choices: String
  answer: String
  airDate: DateTime
}

input ClueWhereInput {
  """Logical AND on all given filters."""
  AND: [ClueWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClueWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClueWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  category: String

  """All values that are not equal to given value."""
  category_not: String

  """All values that are contained in given list."""
  category_in: [String!]

  """All values that are not contained in given list."""
  category_not_in: [String!]

  """All values less than the given value."""
  category_lt: String

  """All values less than or equal the given value."""
  category_lte: String

  """All values greater than the given value."""
  category_gt: String

  """All values greater than or equal the given value."""
  category_gte: String

  """All values containing the given string."""
  category_contains: String

  """All values not containing the given string."""
  category_not_contains: String

  """All values starting with the given string."""
  category_starts_with: String

  """All values not starting with the given string."""
  category_not_starts_with: String

  """All values ending with the given string."""
  category_ends_with: String

  """All values not ending with the given string."""
  category_not_ends_with: String
  difficulty: Int

  """All values that are not equal to given value."""
  difficulty_not: Int

  """All values that are contained in given list."""
  difficulty_in: [Int!]

  """All values that are not contained in given list."""
  difficulty_not_in: [Int!]

  """All values less than the given value."""
  difficulty_lt: Int

  """All values less than or equal the given value."""
  difficulty_lte: Int

  """All values greater than the given value."""
  difficulty_gt: Int

  """All values greater than or equal the given value."""
  difficulty_gte: Int
  question: String

  """All values that are not equal to given value."""
  question_not: String

  """All values that are contained in given list."""
  question_in: [String!]

  """All values that are not contained in given list."""
  question_not_in: [String!]

  """All values less than the given value."""
  question_lt: String

  """All values less than or equal the given value."""
  question_lte: String

  """All values greater than the given value."""
  question_gt: String

  """All values greater than or equal the given value."""
  question_gte: String

  """All values containing the given string."""
  question_contains: String

  """All values not containing the given string."""
  question_not_contains: String

  """All values starting with the given string."""
  question_starts_with: String

  """All values not starting with the given string."""
  question_not_starts_with: String

  """All values ending with the given string."""
  question_ends_with: String

  """All values not ending with the given string."""
  question_not_ends_with: String
  choices: String

  """All values that are not equal to given value."""
  choices_not: String

  """All values that are contained in given list."""
  choices_in: [String!]

  """All values that are not contained in given list."""
  choices_not_in: [String!]

  """All values less than the given value."""
  choices_lt: String

  """All values less than or equal the given value."""
  choices_lte: String

  """All values greater than the given value."""
  choices_gt: String

  """All values greater than or equal the given value."""
  choices_gte: String

  """All values containing the given string."""
  choices_contains: String

  """All values not containing the given string."""
  choices_not_contains: String

  """All values starting with the given string."""
  choices_starts_with: String

  """All values not starting with the given string."""
  choices_not_starts_with: String

  """All values ending with the given string."""
  choices_ends_with: String

  """All values not ending with the given string."""
  choices_not_ends_with: String
  answer: String

  """All values that are not equal to given value."""
  answer_not: String

  """All values that are contained in given list."""
  answer_in: [String!]

  """All values that are not contained in given list."""
  answer_not_in: [String!]

  """All values less than the given value."""
  answer_lt: String

  """All values less than or equal the given value."""
  answer_lte: String

  """All values greater than the given value."""
  answer_gt: String

  """All values greater than or equal the given value."""
  answer_gte: String

  """All values containing the given string."""
  answer_contains: String

  """All values not containing the given string."""
  answer_not_contains: String

  """All values starting with the given string."""
  answer_starts_with: String

  """All values not starting with the given string."""
  answer_not_starts_with: String

  """All values ending with the given string."""
  answer_ends_with: String

  """All values not ending with the given string."""
  answer_not_ends_with: String
  airDate: DateTime

  """All values that are not equal to given value."""
  airDate_not: DateTime

  """All values that are contained in given list."""
  airDate_in: [DateTime!]

  """All values that are not contained in given list."""
  airDate_not_in: [DateTime!]

  """All values less than the given value."""
  airDate_lt: DateTime

  """All values less than or equal the given value."""
  airDate_lte: DateTime

  """All values greater than the given value."""
  airDate_gt: DateTime

  """All values greater than or equal the given value."""
  airDate_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input ClueWhereUniqueInput {
  id: ID
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createClue(data: ClueCreateInput!): Clue!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateClue(data: ClueUpdateInput!, where: ClueWhereUniqueInput!): Clue
  deleteUser(where: UserWhereUniqueInput!): User
  deleteClue(where: ClueWhereUniqueInput!): Clue
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertClue(where: ClueWhereUniqueInput!, create: ClueCreateInput!, update: ClueUpdateInput!): Clue!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyClues(data: ClueUpdateManyMutationInput!, where: ClueWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyClues(where: ClueWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  clues(where: ClueWhereInput, orderBy: ClueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Clue]!
  user(where: UserWhereUniqueInput!): User
  clue(where: ClueWhereUniqueInput!): Clue
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  cluesConnection(where: ClueWhereInput, orderBy: ClueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClueConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  clue(where: ClueSubscriptionWhereInput): ClueSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
}

input UserUpdateManyMutationInput {
  name: String
  email: String
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
}

input UserWhereUniqueInput {
  id: ID
}
